VAR -> ^[a-zA-Z_]{1}[a-zA-Z_0-9]{0,}$
OP -> + | - | * | /
ASSIGN_OP -> =
NUMBER -> 0|[1-9][0-9]*
LOGICAL_OP -> and | or | xor | nor | == | != | > | >= | < | <=
if_KW -> if
do_KW -> do
while_KW -> while
else_KW -> else
L_S_BR -> {
R_S_BR -> }
L_BR -> (
R_BR -> )

lang -> expr+
expr -> assign_expr | if_expr | while_expr | do_while_expr

value -> NUMBER | VAR

if_expr -> if_head if_body (else_KW body)?
if_head -> if_KW if_condition
if_condition -> L_BR logical_expression R_RB
if_body -> L_S_BR expr+ R_S_BR

logical_expression -> value (LOGICAL_OP value)*


while_expr -> while_head while_body
while_head -> while_KW logical_expression
while_body -> L_S_BR expr+ R_S_BR

do_while_expr -> do_KW do_while_body
do_while_body -> while_body while_kw logical_expression

assign_expr -> VAR ASSIGN_OP value_expr*


value_expr -> (value_expr_brackets | value) (OP value_expr)?
value_expr_brackets -> L_BR value_expr R_BR


a = 25
b = (a+1) * 2
if (b<100) {
    while (a>10){
        a=a-1
        if (a = 15){
            b = (b + 50) - 2
        }
    }
}

RPN
lang ГОТОВО
expr ГОТОВО

if_expr ГОТОВО


logical_expression ГОТОВО


while_expr


do_while_expr


assign_expr ГОТОВО

